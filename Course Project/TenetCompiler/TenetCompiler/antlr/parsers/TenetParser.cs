//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Study/Compilers/Course Project/TenetCompiler/TenetCompiler/antlr\Tenet.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TenetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, BASIC_TYPES=7, INTEGER=8, 
		REAL=9, STRING=10, BINARY=11, TERNARY=12, OCTAL=13, HEXADECIMAL=14, DECIMAL=15, 
		FUNCTION=16, VAR=17, CONST=18, WHILE=19, IF=20, ELSE=21, ASSIGN=22, TYPE_SPECIFIER=23, 
		TYPE=24, VOID=25, MATH_OPERATION=26, COMPARISON=27, EOO=28, IDENTIFIER=29, 
		ALPHA=30, DIGIT=31, WHITESPACE=32, SINGLE_LINE_COMMENT=33, MULTI_LINE_COMMENT=34;
	public const int
		RULE_program = 0, RULE_global_scope = 1, RULE_scope = 2, RULE_operation = 3, 
		RULE_declare_function = 4, RULE_define_function = 5, RULE_define_variable = 6, 
		RULE_define_constant = 7, RULE_function_arguments = 8, RULE_function_body = 9, 
		RULE_expression = 10, RULE_call_function = 11, RULE_function_params = 12, 
		RULE_math_operation = 13, RULE_compare = 14, RULE_control_flow = 15, RULE_while = 16, 
		RULE_if = 17, RULE_else = 18;
	public static readonly string[] ruleNames = {
		"program", "global_scope", "scope", "operation", "declare_function", "define_function", 
		"define_variable", "define_constant", "function_arguments", "function_body", 
		"expression", "call_function", "function_params", "math_operation", "compare", 
		"control_flow", "while", "if", "else"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'{'", "'return'", "'}'", null, null, null, 
		null, null, null, null, null, null, "'function'", "'var'", "'const'", 
		"'while'", "'if'", "'else'", "'='", "':'", null, "'void'", null, null, 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "BASIC_TYPES", "INTEGER", "REAL", 
		"STRING", "BINARY", "TERNARY", "OCTAL", "HEXADECIMAL", "DECIMAL", "FUNCTION", 
		"VAR", "CONST", "WHILE", "IF", "ELSE", "ASSIGN", "TYPE_SPECIFIER", "TYPE", 
		"VOID", "MATH_OPERATION", "COMPARISON", "EOO", "IDENTIFIER", "ALPHA", 
		"DIGIT", "WHITESPACE", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tenet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TenetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TenetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TenetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Global_scopeContext global_scope() {
			return GetRuleContext<Global_scopeContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; global_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_scopeContext : ParserRuleContext {
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public Global_scopeContext global_scope() {
			return GetRuleContext<Global_scopeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TenetParser.Eof, 0); }
		public Global_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_scope; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_scopeContext global_scope() {
		Global_scopeContext _localctx = new Global_scopeContext(Context, State);
		EnterRule(_localctx, 2, RULE_global_scope);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_TYPES:
			case FUNCTION:
			case VAR:
			case CONST:
			case MATH_OPERATION:
			case COMPARISON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; operation();
				State = 41; global_scope();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public Control_flowContext control_flow() {
			return GetRuleContext<Control_flowContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scope);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; operation();
				State = 47; scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; control_flow();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode EOO() { return GetToken(TenetParser.EOO, 0); }
		public Declare_functionContext declare_function() {
			return GetRuleContext<Declare_functionContext>(0);
		}
		public Define_functionContext define_function() {
			return GetRuleContext<Define_functionContext>(0);
		}
		public Define_variableContext define_variable() {
			return GetRuleContext<Define_variableContext>(0);
		}
		public Define_constantContext define_constant() {
			return GetRuleContext<Define_constantContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 6, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 53; declare_function();
				}
				break;
			case 2:
				{
				State = 54; define_function();
				}
				break;
			case 3:
				{
				State = 55; define_variable();
				}
				break;
			case 4:
				{
				State = 56; define_constant();
				}
				break;
			case 5:
				{
				State = 57; expression();
				}
				break;
			}
			State = 60; Match(EOO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_functionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(TenetParser.FUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public ITerminalNode TYPE_SPECIFIER() { return GetToken(TenetParser.TYPE_SPECIFIER, 0); }
		public ITerminalNode TYPE() { return GetToken(TenetParser.TYPE, 0); }
		public ITerminalNode VOID() { return GetToken(TenetParser.VOID, 0); }
		public Declare_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_functionContext declare_function() {
		Declare_functionContext _localctx = new Declare_functionContext(Context, State);
		EnterRule(_localctx, 8, RULE_declare_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(FUNCTION);
			State = 63; Match(IDENTIFIER);
			State = 64; Match(T__0);
			State = 65; function_arguments(0);
			State = 66; Match(T__1);
			State = 67; Match(TYPE_SPECIFIER);
			State = 68;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE || _la==VOID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_functionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(TenetParser.FUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public ITerminalNode TYPE_SPECIFIER() { return GetToken(TenetParser.TYPE_SPECIFIER, 0); }
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(TenetParser.TYPE, 0); }
		public ITerminalNode VOID() { return GetToken(TenetParser.VOID, 0); }
		public Define_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_functionContext define_function() {
		Define_functionContext _localctx = new Define_functionContext(Context, State);
		EnterRule(_localctx, 10, RULE_define_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(FUNCTION);
			State = 71; Match(IDENTIFIER);
			State = 72; Match(T__0);
			State = 73; function_arguments(0);
			State = 74; Match(T__1);
			State = 75; Match(TYPE_SPECIFIER);
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE || _la==VOID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 77; function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_variableContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TenetParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public ITerminalNode TYPE_SPECIFIER() { return GetToken(TenetParser.TYPE_SPECIFIER, 0); }
		public ITerminalNode TYPE() { return GetToken(TenetParser.TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(TenetParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Define_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_variableContext define_variable() {
		Define_variableContext _localctx = new Define_variableContext(Context, State);
		EnterRule(_localctx, 12, RULE_define_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(VAR);
			State = 80; Match(IDENTIFIER);
			State = 81; Match(TYPE_SPECIFIER);
			State = 82; Match(TYPE);
			State = 83; Match(ASSIGN);
			State = 84; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_constantContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(TenetParser.CONST, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public ITerminalNode TYPE_SPECIFIER() { return GetToken(TenetParser.TYPE_SPECIFIER, 0); }
		public ITerminalNode TYPE() { return GetToken(TenetParser.TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(TenetParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Define_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_constantContext define_constant() {
		Define_constantContext _localctx = new Define_constantContext(Context, State);
		EnterRule(_localctx, 14, RULE_define_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(CONST);
			State = 87; Match(IDENTIFIER);
			State = 88; Match(TYPE_SPECIFIER);
			State = 89; Match(TYPE);
			State = 90; Match(ASSIGN);
			State = 91; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public ITerminalNode TYPE_SPECIFIER() { return GetToken(TenetParser.TYPE_SPECIFIER, 0); }
		public ITerminalNode TYPE() { return GetToken(TenetParser.TYPE, 0); }
		public ITerminalNode VOID() { return GetToken(TenetParser.VOID, 0); }
		public Function_argumentsContext[] function_arguments() {
			return GetRuleContexts<Function_argumentsContext>();
		}
		public Function_argumentsContext function_arguments(int i) {
			return GetRuleContext<Function_argumentsContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		return function_arguments(0);
	}

	private Function_argumentsContext function_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, _parentState);
		Function_argumentsContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_function_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 94; Match(IDENTIFIER);
				State = 95; Match(TYPE_SPECIFIER);
				State = 96; Match(TYPE);
				}
				break;
			case VOID:
				{
				State = 97; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_argumentsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_arguments);
					State = 100;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 101; Match(T__2);
					State = 102; function_arguments(4);
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOO() { return GetToken(TenetParser.EOO, 0); }
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__3);
			State = 109; scope();
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 110; scope();
				}
				break;
			case 2:
				{
				State = 111; Match(T__4);
				State = 112; expression();
				State = 113; Match(EOO);
				}
				break;
			case 3:
				{
				}
				break;
			}
			State = 118; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Call_functionContext call_function() {
			return GetRuleContext<Call_functionContext>(0);
		}
		public Math_operationContext math_operation() {
			return GetRuleContext<Math_operationContext>(0);
		}
		public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public ITerminalNode BASIC_TYPES() { return GetToken(TenetParser.BASIC_TYPES, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 120; call_function();
				}
				break;
			case 2:
				{
				State = 121; math_operation();
				}
				break;
			case 3:
				{
				State = 122; compare();
				}
				break;
			case 4:
				{
				State = 123; Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				State = 124; Match(BASIC_TYPES);
				}
				break;
			}
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_TYPES:
			case MATH_OPERATION:
			case COMPARISON:
			case IDENTIFIER:
				{
				State = 127; expression();
				}
				break;
			case T__1:
			case T__2:
			case EOO:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_functionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public Function_paramsContext function_params() {
			return GetRuleContext<Function_paramsContext>(0);
		}
		public Call_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_functionContext call_function() {
		Call_functionContext _localctx = new Call_functionContext(Context, State);
		EnterRule(_localctx, 22, RULE_call_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(IDENTIFIER);
			State = 132; Match(T__0);
			State = 133; function_params(0);
			State = 134; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_paramsContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TenetParser.IDENTIFIER, 0); }
		public ITerminalNode BASIC_TYPES() { return GetToken(TenetParser.BASIC_TYPES, 0); }
		public Function_paramsContext[] function_params() {
			return GetRuleContexts<Function_paramsContext>();
		}
		public Function_paramsContext function_params(int i) {
			return GetRuleContext<Function_paramsContext>(i);
		}
		public Function_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_params; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_paramsContext function_params() {
		return function_params(0);
	}

	private Function_paramsContext function_params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_paramsContext _localctx = new Function_paramsContext(Context, _parentState);
		Function_paramsContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_function_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 137; Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 138; Match(BASIC_TYPES);
				}
				break;
			case 3:
				{
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_paramsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_params);
					State = 142;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 143; Match(T__2);
					State = 144; function_params(5);
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Math_operationContext : ParserRuleContext {
		public ITerminalNode MATH_OPERATION() { return GetToken(TenetParser.MATH_OPERATION, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Math_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_operationContext math_operation() {
		Math_operationContext _localctx = new Math_operationContext(Context, State);
		EnterRule(_localctx, 26, RULE_math_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(MATH_OPERATION);
			State = 151; Match(T__0);
			State = 152; expression();
			State = 153; Match(T__2);
			State = 154; expression();
			State = 155; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		public ITerminalNode COMPARISON() { return GetToken(TenetParser.COMPARISON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 28, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(COMPARISON);
			State = 158; Match(T__0);
			State = 159; expression();
			State = 160; Match(T__2);
			State = 161; expression();
			State = 162; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_flowContext : ParserRuleContext {
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public Control_flowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_flow; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_flow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_flowContext control_flow() {
		Control_flowContext _localctx = new Control_flowContext(Context, State);
		EnterRule(_localctx, 30, RULE_control_flow);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; @while();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; @if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TenetParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 32, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(WHILE);
			State = 169; Match(T__0);
			State = 170; expression();
			State = 171; Match(T__1);
			State = 172; Match(T__3);
			State = 173; scope();
			State = 174; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TenetParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 34, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(IF);
			State = 177; Match(T__0);
			State = 178; expression();
			State = 179; Match(T__1);
			State = 180; Match(T__3);
			State = 181; scope();
			State = 182; Match(T__5);
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				{
				State = 183; @else();
				}
				break;
			case T__4:
			case T__5:
			case BASIC_TYPES:
			case FUNCTION:
			case VAR:
			case CONST:
			case WHILE:
			case IF:
			case MATH_OPERATION:
			case COMPARISON:
			case IDENTIFIER:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(TenetParser.ELSE, 0); }
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITenetVisitor<TResult> typedVisitor = visitor as ITenetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 36, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(ELSE);
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				{
				State = 188; @if();
				}
				break;
			case T__3:
				{
				State = 189; Match(T__3);
				State = 190; scope();
				State = 191; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return function_arguments_sempred((Function_argumentsContext)_localctx, predIndex);
		case 12: return function_params_sempred((Function_paramsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool function_arguments_sempred(Function_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool function_params_sempred(Function_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\xC6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '=', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x65', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'j', '\n', '\n', '\f', '\n', '\xE', '\n', 'm', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'w', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x80', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x84', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x8F', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x94', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x97', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xA9', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xBC', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xC4', '\n', '\x14', '\x3', '\x14', '\x2', '\x4', 
		'\x12', '\x1A', '\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '\x2', '\x3', '\x3', '\x2', '\x1A', '\x1B', '\x2', '\xC8', '\x2', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x35', '\x3', '\x2', '\x2', '\x2', '\b', '<', '\x3', '\x2', '\x2', 
		'\x2', '\n', '@', '\x3', '\x2', '\x2', '\x2', '\f', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'Q', '\x3', '\x2', '\x2', '\x2', '\x10', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x64', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x16', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', ' ', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xAA', '\x3', '\x2', '\x2', '\x2', '$', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xBD', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x5', 
		'\x4', '\x3', '\x2', ')', '\x3', '\x3', '\x2', '\x2', '\x2', '*', '+', 
		'\x5', '\b', '\x5', '\x2', '+', ',', '\x5', '\x4', '\x3', '\x2', ',', 
		'/', '\x3', '\x2', '\x2', '\x2', '-', '/', '\a', '\x2', '\x2', '\x3', 
		'.', '*', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\b', '\x5', 
		'\x2', '\x31', '\x32', '\x5', '\x6', '\x4', '\x2', '\x32', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x5', ' ', '\x11', '\x2', '\x34', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'=', '\x5', '\n', '\x6', '\x2', '\x38', '=', '\x5', '\f', '\a', '\x2', 
		'\x39', '=', '\x5', '\xE', '\b', '\x2', ':', '=', '\x5', '\x10', '\t', 
		'\x2', ';', '=', '\x5', '\x16', '\f', '\x2', '<', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'\x1E', '\x2', '\x2', '?', '\t', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\a', '\x12', '\x2', '\x2', '\x41', '\x42', '\a', '\x1F', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x3', '\x2', '\x2', '\x43', '\x44', '\x5', '\x12', 
		'\n', '\x2', '\x44', '\x45', '\a', '\x4', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\x19', '\x2', '\x2', '\x46', 'G', '\t', '\x2', '\x2', '\x2', 'G', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\x12', '\x2', '\x2', 
		'I', 'J', '\a', '\x1F', '\x2', '\x2', 'J', 'K', '\a', '\x3', '\x2', '\x2', 
		'K', 'L', '\x5', '\x12', '\n', '\x2', 'L', 'M', '\a', '\x4', '\x2', '\x2', 
		'M', 'N', '\a', '\x19', '\x2', '\x2', 'N', 'O', '\t', '\x2', '\x2', '\x2', 
		'O', 'P', '\x5', '\x14', '\v', '\x2', 'P', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x13', '\x2', '\x2', 'R', 'S', '\a', '\x1F', '\x2', 
		'\x2', 'S', 'T', '\a', '\x19', '\x2', '\x2', 'T', 'U', '\a', '\x1A', '\x2', 
		'\x2', 'U', 'V', '\a', '\x18', '\x2', '\x2', 'V', 'W', '\x5', '\x16', 
		'\f', '\x2', 'W', '\xF', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x14', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\x1F', '\x2', '\x2', 'Z', '[', '\a', '\x19', 
		'\x2', '\x2', '[', '\\', '\a', '\x1A', '\x2', '\x2', '\\', ']', '\a', 
		'\x18', '\x2', '\x2', ']', '^', '\x5', '\x16', '\f', '\x2', '^', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\b', '\n', '\x1', '\x2', '`', '\x61', 
		'\a', '\x1F', '\x2', '\x2', '\x61', '\x62', '\a', '\x19', '\x2', '\x2', 
		'\x62', '\x65', '\a', '\x1A', '\x2', '\x2', '\x63', '\x65', '\a', '\x1B', 
		'\x2', '\x2', '\x64', '_', '\x3', '\x2', '\x2', '\x2', '\x64', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'k', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\f', '\x5', '\x2', '\x2', 'g', 'h', '\a', '\x5', '\x2', '\x2', 'h', 
		'j', '\x5', '\x12', '\n', '\x6', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x6', '\x2', 
		'\x2', 'o', 'v', '\x5', '\x6', '\x4', '\x2', 'p', 'w', '\x5', '\x6', '\x4', 
		'\x2', 'q', 'r', '\a', '\a', '\x2', '\x2', 'r', 's', '\x5', '\x16', '\f', 
		'\x2', 's', 't', '\a', '\x1E', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'q', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\b', '\x2', 
		'\x2', 'y', '\x15', '\x3', '\x2', '\x2', '\x2', 'z', '\x80', '\x5', '\x18', 
		'\r', '\x2', '{', '\x80', '\x5', '\x1C', '\xF', '\x2', '|', '\x80', '\x5', 
		'\x1E', '\x10', '\x2', '}', '\x80', '\a', '\x1F', '\x2', '\x2', '~', '\x80', 
		'\a', '\t', '\x2', '\x2', '\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x5', 
		'\x16', '\f', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x17', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', 
		'\x1F', '\x2', '\x2', '\x86', '\x87', '\a', '\x3', '\x2', '\x2', '\x87', 
		'\x88', '\x5', '\x1A', '\xE', '\x2', '\x88', '\x89', '\a', '\x4', '\x2', 
		'\x2', '\x89', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\b', 
		'\xE', '\x1', '\x2', '\x8B', '\x8F', '\a', '\x1F', '\x2', '\x2', '\x8C', 
		'\x8F', '\a', '\t', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\f', '\x6', '\x2', 
		'\x2', '\x91', '\x92', '\a', '\x5', '\x2', '\x2', '\x92', '\x94', '\x5', 
		'\x1A', '\xE', '\a', '\x93', '\x90', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x1C', '\x2', '\x2', '\x99', '\x9A', '\a', '\x3', '\x2', 
		'\x2', '\x9A', '\x9B', '\x5', '\x16', '\f', '\x2', '\x9B', '\x9C', '\a', 
		'\x5', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x16', '\f', '\x2', '\x9D', 
		'\x9E', '\a', '\x4', '\x2', '\x2', '\x9E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\x1D', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'\x3', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x16', '\f', '\x2', '\xA2', 
		'\xA3', '\a', '\x5', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x16', '\f', 
		'\x2', '\xA4', '\xA5', '\a', '\x4', '\x2', '\x2', '\xA5', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA9', '\x5', '\"', '\x12', '\x2', '\xA7', 
		'\xA9', '\x5', '$', '\x13', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x15', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x3', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x16', '\f', 
		'\x2', '\xAD', '\xAE', '\a', '\x4', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\x6', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\x6', '\x4', '\x2', '\xB0', 
		'\xB1', '\a', '\b', '\x2', '\x2', '\xB1', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\a', '\x16', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x3', 
		'\x2', '\x2', '\xB4', '\xB5', '\x5', '\x16', '\f', '\x2', '\xB5', '\xB6', 
		'\a', '\x4', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x6', '\x2', '\x2', 
		'\xB7', '\xB8', '\x5', '\x6', '\x4', '\x2', '\xB8', '\xBB', '\a', '\b', 
		'\x2', '\x2', '\xB9', '\xBC', '\x5', '&', '\x14', '\x2', '\xBA', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xC3', '\a', '\x17', '\x2', '\x2', '\xBE', '\xC4', 
		'\x5', '$', '\x13', '\x2', '\xBF', '\xC0', '\a', '\x6', '\x2', '\x2', 
		'\xC0', '\xC1', '\x5', '\x6', '\x4', '\x2', '\xC1', '\xC2', '\a', '\b', 
		'\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\'', '\x3', '\x2', '\x2', '\x2', '\xF', '.', '\x35', '<', '\x64', 
		'k', 'v', '\x7F', '\x83', '\x8E', '\x95', '\xA8', '\xBB', '\xC3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
